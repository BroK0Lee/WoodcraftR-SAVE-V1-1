import { useRef, useState, useCallback } from 'react';
import { MaterialSphere, Material } from './MaterialSphere';
import { MaterialInteractionManager } from './MaterialInteractionManager';
import { useWoodMaterialSelectorInit } from '@/hooks/useWoodMaterialSelectorInit';
import * as TWEEN from '@tweenjs/tween.js';

interface UseMaterialSelectorConfig {
  materials: Material[];
  onMaterialSelect: (material: Material) => void;
  selectedMaterialId?: string;
}

export function useMaterialSelector(config: UseMaterialSelectorConfig) {
  const { materials, onMaterialSelect } = config;
  
  // √âtat local
  const [isReady, setIsReady] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // R√©f√©rences pour les gestionnaires
  const sphereRef = useRef<MaterialSphere | null>(null);
  const interactionManagerRef = useRef<MaterialInteractionManager | null>(null);
  
  // Hook d'initialisation global
  const { 
    isInitialized, 
    mountRenderer, 
    unmountRenderer, 
    getCachedInstances,
    setCachedSphere
  } = useWoodMaterialSelectorInit();

  // Fonction pour initialiser le s√©lecteur de mat√©riaux
  const initializeSelector = useCallback(async (container: HTMLElement): Promise<boolean> => {
    try {
      console.log('üöÄ [useMaterialSelector] Initialisation du s√©lecteur...');

      // Monter le renderer dans le conteneur
      const renderer = mountRenderer(container);
      if (!renderer) {
        throw new Error('Impossible de monter le renderer');
      }

      // R√©cup√©rer les instances du cache
      const { scene, camera, controls, materialSphere, isSphereCreated } = getCachedInstances();
      if (!scene || !camera) {
        throw new Error('Instances du cache invalides');
      }

      // R√©utiliser la sph√®re du cache ou en cr√©er une nouvelle
      if (isSphereCreated && materialSphere) {
        console.log('‚ôªÔ∏è [useMaterialSelector] R√©utilisation de la sph√®re mise en cache');
        sphereRef.current = materialSphere;
        
        // Mettre √† jour seulement les mat√©riaux si n√©cessaire
        if (sphereRef.current) {
          sphereRef.current.updateMaterials(materials);
        }
      } else {
        console.log('üÜï [useMaterialSelector] Cr√©ation d\'une nouvelle sph√®re');
        // Cr√©er le gestionnaire de sph√®re
        sphereRef.current = new MaterialSphere(scene);
        
        // Cr√©er la sph√®re de mat√©riaux (rayon identique √† l'exemple Three.js)
        sphereRef.current.createSphere({
          radius: 800,  // M√™me rayon que l'exemple Three.js original
          materials
        });

        // Sauvegarder dans le cache
        setCachedSphere(sphereRef.current);
      }

      // Cr√©er le gestionnaire d'interactions
      interactionManagerRef.current = new MaterialInteractionManager({
        camera,
        container: renderer.domElement,
        onMaterialClick: onMaterialSelect
      });

      // Configurer les interactions avec les cartes mat√©riaux
      // Attendre que les √©l√©ments DOM soient cr√©√©s
      setTimeout(() => {
        if (interactionManagerRef.current) {
          interactionManagerRef.current.setupMaterialInteractions(materials);
        }
      }, 100);

      // D√©marrer l'animation vers la sph√®re
      if (sphereRef.current) {
        sphereRef.current.transformToSphere();
      }

      // Configurer l'animation continue
      let animationId: number;
      const animate = () => {
        animationId = requestAnimationFrame(animate);
        
        // Mettre √† jour TWEEN.js (indispensable pour les animations Three.js)
        TWEEN.update();
        
        if (controls) {
          controls.update();
        }
        if (renderer && scene && camera) {
          renderer.render(scene, camera);
        }
      };
      animationId = requestAnimationFrame(animate);

      // Stocker l'ID d'animation pour le cleanup
      (container as any)._animationId = animationId;

      setIsReady(true);
      console.log('‚úÖ [useMaterialSelector] S√©lecteur initialis√© avec succ√®s');
      return true;

    } catch (err) {
      console.error('‚ùå [useMaterialSelector] Erreur d\'initialisation:', err);
      setError(err instanceof Error ? err.message : 'Erreur inconnue');
      return false;
    }
  }, [materials, onMaterialSelect, mountRenderer, getCachedInstances, setCachedSphere]);

  // Fonction pour nettoyer le s√©lecteur
  const cleanupSelector = useCallback((container: HTMLElement): void => {
    console.log('üßπ [useMaterialSelector] Nettoyage du s√©lecteur...');

    // Arr√™ter l'animation
    const animationId = (container as any)._animationId;
    if (animationId) {
      cancelAnimationFrame(animationId);
      delete (container as any)._animationId;
    }

    // Nettoyer le gestionnaire d'interactions
    if (interactionManagerRef.current) {
      interactionManagerRef.current.destroy();
      interactionManagerRef.current = null;
    }

    // Nettoyer la sph√®re
    if (sphereRef.current) {
      sphereRef.current.destroy();
      sphereRef.current = null;
    }

    // D√©monter le renderer
    unmountRenderer(container);

    setIsReady(false);
  }, [unmountRenderer]);

  // Fonction pour mettre √† jour la s√©lection
  const updateSelection = useCallback((_newSelectedId: string | null): void => {
    if (sphereRef.current) {
      // Recr√©er la sph√®re avec la nouvelle s√©lection (rayon identique √† l'exemple Three.js)
      sphereRef.current.createSphere({
        radius: 800,  // M√™me rayon que l'exemple Three.js original
        materials
      });

      // Reconfigurer les interactions avec les nouvelles cartes mat√©riaux
      if (interactionManagerRef.current) {
        setTimeout(() => {
          if (interactionManagerRef.current) {
            interactionManagerRef.current.setupMaterialInteractions(materials);
          }
        }, 100);
      }
    }
  }, [materials]);

  // === NOUVELLES M√âTHODES INSPIR√âES DU TABLEAU P√âRIODIQUE THREE.JS ===
  
  // Transformer vers une grille
  const transformToGrid = useCallback((): void => {
    if (sphereRef.current) {
      sphereRef.current.transformToGrid();
    }
  }, []);
  
  // Transformer vers une h√©lice
  const transformToHelix = useCallback((): void => {
    if (sphereRef.current) {
      sphereRef.current.transformToHelix();
    }
  }, []);
  
  // Retourner vers la sph√®re
  const transformToSphere = useCallback((): void => {
    if (sphereRef.current) {
      sphereRef.current.transformToSphere();
    }
  }, []);

  return {
    isReady,
    error,
    isInitialized,
    initializeSelector,
    cleanupSelector,
    updateSelection,
    // Nouvelles m√©thodes de transformation
    transformToGrid,
    transformToHelix,
    transformToSphere
  };
}
